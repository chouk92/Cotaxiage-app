rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isParticipant(tripId) {
      let trip = get(/databases/$(database)/documents/trips/$(tripId));
      return trip != null && (
        trip.data.creatorId == request.auth.uid ||
        request.auth.uid in trip.data.participants
      );
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false;
    }

    // Trips collection
    match /trips/{tripId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
        request.auth.uid in resource.data.participants
      );
      allow delete: if false;
    }

    // Stations collection (read-only for authenticated users)
    match /stations/{stationId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && isParticipant(resource.data.tripId);
      allow create: if isAuthenticated() && isParticipant(request.resource.data.tripId);
      allow update, delete: if false;
    }
  }
}